---
alwaysApply: true
---
### **Primary Objective**

All code generated by the AI must strictly adhere to the rules below to ensure the codebase remains clean, maintainable, scalable, and consistent with the existing project.

---

### **Rule 1: Directory Structure (Fixed)**

Always place newly generated files in the correct directory according to their function.

*   `cmd/`: Entrypoints for applications (e.g., `cmd/api/main.go`). Keep `main.go` files minimal.
*   `internal/`: Contains all the business logic of the application. This code cannot be imported by external projects.
*   `pkg/`: Contains reusable libraries and code that are safe to be used by other projects.
*   `proto/`: Contains only Protobuf definition files (`.proto`). Do not place Go code here.
*   `config/`: Contains configuration files (e.g., `config.yaml`).
*   `migrations/`: Contains SQL scripts for database migrations.
*   `docs/`: Contains developer and user documentation.
*  Do not place new domains outside of internal/or cluttered with other domains.
---

### **Rule 2: Architecture within `internal/` (Clean Architecture)**

Each submodule within `internal/` (e.g., `internal/chat`, `internal/user`) must follow Clean Architecture and the Dependency Inversion Principle.

1.  **Separation of Interface and Implementation:**
    *   **Interfaces (Contracts):** Are defined in the root files of the module. For example:
        *   `internal/chat/repository.go` defines the `ChatRepository` interface.
        *   `internal/chat/usecase.go` defines the `ChatUsecase` interface.
    *   **Implementations:** Are placed in subdirectories corresponding to the specific technology. For example:
        *   `internal/chat/repository/mysql.go` contains the `chatMySQLRepo` struct that implements `ChatRepository`.
        *   `internal/chat/delivery/http.go` contains the `chatHTTPDelivery` struct that implements `ChatDelivery`.

2.  **Dependency Flow:**
    *   Outer layers (e.g., `delivery`, `repository`) must depend on inner layers (`usecase`, entities), never the other way around.
    *   Use Dependency Injection (DI) via `New...()` constructor functions to provide concrete implementations to structs.

3.  **Template for a New Module (e.g., `webrtc`):**
    ```
    internal/webrtc/
    ├── delivery.go       # Defines the WebRTCDelivery interface
    ├── repository.go     # Defines the WebRTCRepository interface
    ├── usecase.go        # Defines the WebRTCUsecase interface
    ├── errors.go         # Defines custom errors for the webrtc module
    ├── delivery/
    │   └── websocket.go  # Implements WebRTCDelivery for WebSockets
    └── repository/
        └── redis.go      # Implements WebRTCRepository using Redis
    ```

---

### **Rule 3: Go Coding Conventions**

1.  **Naming Conventions:**
    *   **Filenames:** Use `snake_case` (e.g., `user_repository.go`).
    *   **Package names:** Use lowercase, no underscores, and keep them short (e.g., `chat`, `user`).
    *   **Interfaces:** Use `PascalCase`. An interface with a single method should be named with an `-er` suffix (e.g., `Reader`).
    *   **Implementation structs:** Use `camelCase` (e.g., `chatMySQLRepo`).
    *   **Functions and variables:** `PascalCase` for exported (public) members, `camelCase` for unexported (private) members.

2.  **Formatting:**
    *   Always run `goimports` or `gofmt` before finalizing code.

3.  **Linting:**
    *   Code must pass `golangci-lint` checks without any errors.

4.  **Error Handling:**
    *   Never discard errors using `_`.
    *   Always check for errors and return them explicitly.
    *   Use the predefined error variables from the module's `errors.go` file.

5.  **Testing:**
    *   Write unit tests for critical logic, especially within the `usecase` and `repository` layers.
    *   Test files must have a `_test.go` suffix and be located in the same directory as the file being tested.

---

### **Rule 4: Workflow and Tooling**

1.  **Database:** All changes to the database schema must be accompanied by a new migration file in the `migrations/` directory.
2.  **Configuration:** Do not hard-code configuration values. They must be loaded from files in `config/` or from environment variables.